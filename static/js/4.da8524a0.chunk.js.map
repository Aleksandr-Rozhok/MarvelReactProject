{"version":3,"sources":["resources/img/mjolnir.png","components/randomChar/RandomChar.js","components/charListItem/charListItem.js","components/charList/CharList.js","components/charInfo/CharInfo.js","components/charSearchInfo/CharSearchInfo.js","components/errorBoundary/ErrorBoundary.js","resources/img/vision.png","components/pages/MainPage.js","components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js","services/MarvelService.js","hooks/http.hook.js","components/skeleton/Skeleton.js","utils/setContent.js","hooks/list.hook.js"],"names":["View","_ref","data","name","description","thumbnail","homepage","wiki","correctDesc","length","concat","slice","styleForImg","includes","objectFit","_jsxs","className","children","_jsx","src","style","alt","href","RandomChar","_useState","useState","_useState2","_slicedToArray","char","setChar","_useMarvelService","useMarvelService","getCharacter","clearError","process","setProcess","useEffect","updateChar","onCharLoaded","id","Math","floor","random","then","setContent","onClick","mjolnir","CharListItem","props","img","onCharSelected","addActiveClass","index","transitionSteak","motion","li","tabIndex","onKeyDown","e","key","custom","variants","visible","opacity","x","transition","delay","hidden","CharList","_useList","useList","limit","type","list","offset","newItemLoading","itemEnded","loading","error","onRequest","myRef","useRef","_asyncToGenerator","_regeneratorRuntime","mark","_callee","i","_document$querySelect","_myRef$current$childr","wrap","_context","prev","next","document","querySelector","classList","remove","current","add","stop","_x","apply","arguments","charList","map","item","errorMessage","ErrorMessage","spinner","Spinner","ul","ref","initial","animate","disabled","tenComics","comics","noComics","Array","from","_Fragment","Link","to","resourceURI","CharInfo","charId","onCharsLoaded","CharSearchInfo","getCharacterByName","results","Formik","initialValues","charName","validationSchema","Yup","required","onSubmit","Form","Field","placeholder","FormikErrorMessage","component","ErrorBoundary","_Component","_inherits","_super","_createSuper","_this","_classCallCheck","_len","args","_key","call","state","_createClass","value","this","setState","Component","MainPage","selectedChar","Helmet","content","decoration","display","width","height","margin","_useHttp","request","useCallback","url","method","body","headers","response","_args","undefined","fetch","sent","ok","Error","status","json","abrupt","t0","useHttp","_apiBase","_apiKey","res","_transformCharacter","_ref2","_callee2","_context2","_x2","getComic","_ref3","_callee3","_context3","_transformComics","_x3","getAllList","_ref4","_callee4","_args4","_context4","_x4","_x5","path","extension","urls","items","comic","title","price","prices","desc","pageCount","language","textObjects","Skeleton","initialLoad","setList","_useState3","_useState4","setNewItemLoading","_useState5","_useState6","setOffset","_useState7","_useState8","setItemEnded","offsetArg","onListLoading","onLoaded","newItem","ended","_toConsumableArray"],"mappings":"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","file":"static/js/4.da8524a0.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/mjolnir.61f31e18.png\";","import { useState, useEffect } from \"react\";\r\n\r\nimport \"./randomChar.scss\";\r\nimport mjolnir from \"../../resources/img/mjolnir.png\";\r\n\r\nimport useMarvelService from \"../../services/MarvelService\";\r\nimport setContent from \"../../utils/setContent\";\r\n\r\nconst RandomChar = () => {\r\n    const [char, setChar] = useState({});\r\n\r\n    const {getCharacter, clearError, process, setProcess} = useMarvelService();\r\n\r\n    useEffect(() => {\r\n        updateChar();\r\n    }, []);\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    }\r\n\r\n    const updateChar = () => {\r\n        clearError();\r\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\r\n        getCharacter(id)\r\n            .then(onCharLoaded)\r\n            .then(() => setProcess(\"confirmed\"));\r\n    }\r\n\r\n    return (\r\n        <div className=\"randomchar\">\r\n            {setContent(process, View, char)}\r\n            <div className=\"randomchar__static\">\r\n                <p className=\"randomchar__title\">\r\n                    Random character for today!<br/>\r\n                    Do you want to get to know him better?\r\n                </p>\r\n                <p className=\"randomchar__title\">\r\n                    Or choose another one\r\n                </p>\r\n                <button className=\"button button__main\">\r\n                    <div onClick={updateChar} className=\"inner\">try it</div>\r\n                </button>\r\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst View = ({data}) => {\r\n    const {name, description, thumbnail, homepage, wiki} = data;\r\n    const noDesc = \"Unfortunately there is no data about this character\";\r\n        const correctDesc = !description ? noDesc : \r\n        description.length > 200 ? `${description.slice(0, 200)}...` : description;\r\n    const styleForImg = thumbnail?.includes(\"image_not_available\") ? {objectFit: \"contain\"} : null;\r\n\r\n    return (\r\n        <div className=\"randomchar__block\">\r\n            <img src={thumbnail} style={styleForImg} alt=\"Random character\" className=\"randomchar__img\"/>\r\n            <div className=\"randomchar__info\">\r\n                <p className=\"randomchar__name\">{name}</p>\r\n                <p className=\"randomchar__descr\">\r\n                    {correctDesc}\r\n                </p>\r\n                <div className=\"randomchar__btns\">\r\n                    <a href={homepage} className=\"button button__main\">\r\n                        <div className=\"inner\">homepage</div>\r\n                    </a>\r\n                    <a href={wiki} className=\"button button__secondary\">\r\n                        <div className=\"inner\">Wiki</div>\r\n                    </a>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RandomChar;","import { motion } from \"framer-motion/dist/framer-motion\"\r\n\r\nimport \"./charListItem.scss\";\r\n\r\nconst CharListItem = (props) => {   \r\n\r\n    const item = {\r\n        visible: custom => ({ opacity: 1, x: 0, transition: { delay: custom * 0.2} }),\r\n        hidden: { opacity: 0, x: 0 },\r\n    }\r\n\r\n    const {name, img, id, onCharSelected, addActiveClass, index, transitionSteak} = props;\r\n    const styleForImg = img.includes(\"image_not_available\") ? {objectFit: \"contain\"} : null;\r\n\r\n    return (\r\n        <motion.li \r\n            key={id}\r\n            tabIndex={index}\r\n            onClick={() => {onCharSelected(); addActiveClass()}}\r\n            onKeyDown={(e) => {\r\n                if (e.key === \" \" || e.key === \"Enter\") {\r\n                    onCharSelected();\r\n                    addActiveClass()\r\n                }\r\n            }} \r\n            className=\"char__item\"\r\n            custom={transitionSteak}\r\n            variants={item}>\r\n            <img src={img} alt={name} style={styleForImg}/>\r\n            <div className=\"char__name\">{name}</div>\r\n        </motion.li>\r\n    )\r\n}\r\n\r\nexport default CharListItem;","import { useRef } from \"react\";\r\nimport { motion } from \"framer-motion/dist/framer-motion\"\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport \"./charList.scss\";\r\n\r\nimport { useList } from \"../../hooks/list.hook\";\r\nimport CharListItem from \"../charListItem/charListItem\";\r\nimport Spinner from \"../spinner/Spinner\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nconst CharList = (props) => {\r\n    const {list, \r\n           offset, \r\n           newItemLoading, \r\n           itemEnded, \r\n           loading, \r\n           error, \r\n           onRequest} = useList({limit: 9, type: \"characters\"});\r\n    const myRef = useRef();\r\n\r\n    const addActiveClass = async (i) => {\r\n        document.querySelector(\".char__item_selected\")?.classList.remove(\"char__item_selected\");\r\n        myRef.current.children[i]?.classList.add(\"char__item_selected\");\r\n    }\r\n    \r\n    let charList = [];\r\n\r\n    if (list) {\r\n        let transitionSteak = 0;\r\n        charList = list.map((item, i) => {\r\n            transitionSteak < 9 ? transitionSteak++ : transitionSteak = 1;\r\n            return <CharListItem \r\n                        addActiveClass={() => addActiveClass(i)} \r\n                        onCharSelected={() => props.onCharSelected(item.id)}\r\n                        transitionSteak={transitionSteak}\r\n                        index={i + 10} \r\n                        key={item.id} \r\n                        img={item.thumbnail} \r\n                        name={item.name} />\r\n        })\r\n    }\r\n\r\n    const errorMessage = error ? <ErrorMessage /> : null;\r\n    const spinner = loading && !newItemLoading ? <Spinner /> : null;\r\n    \r\n    return (\r\n        <div className=\"char__list\">\r\n            {errorMessage}\r\n            <motion.ul \r\n                ref={myRef} \r\n                className=\"char__grid\"\r\n                initial=\"hidden\"\r\n                animate=\"visible\">\r\n                {charList}\r\n            </motion.ul>\r\n            {spinner}\r\n            <button onClick={() => onRequest(offset)}\r\n                    disabled={newItemLoading}\r\n                    style={{\"display\": itemEnded ? \"none\" : \"block\"}} \r\n                    className=\"button button__main button__long\">\r\n                <div className=\"inner\">load more</div>\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\nCharList.propTypes = {\r\n    onCharSelected: PropTypes.func\r\n}\r\n\r\nexport default CharList;","import { useState, useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport \"./charInfo.scss\";\r\n\r\nimport useMarvelService from \"../../services/MarvelService\";\r\nimport setContent from \"../../utils/setContent\";\r\n\r\nconst CharInfo = (props) => {\r\n    const [char, setChar] = useState(null);\r\n\r\n    const {getCharacter, clearError, process, setProcess} = useMarvelService();\r\n\r\n    useEffect(() => {\r\n        updateChar();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        updateChar();\r\n    }, [props.charId])\r\n\r\n    const updateChar = () => {\r\n        const {charId} = props;\r\n\r\n        if (!charId) {\r\n            return;\r\n        }\r\n\r\n        onCharsLoaded();\r\n        clearError();\r\n        getCharacter(charId)\r\n            .then(onCharsLoaded)\r\n            .then(() => setProcess(\"confirmed\"));\r\n    }\r\n\r\n    const onCharsLoaded = (char) => {\r\n        setChar(char);\r\n    }\r\n\r\n    return (\r\n        <div className=\"char__info\">\r\n            {setContent(process, View, char)}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst View = ({data}) => {\r\n    let {name, description, thumbnail, homepage, wiki, comics} = data;\r\n\r\n    const styleForImg = thumbnail.includes(\"image_not_available\") ? {objectFit: \"contain\"} : null;\r\n    let noComics = \"\"\r\n    let tenComics;\r\n\r\n    if (comics.length === 0) {\r\n        noComics = \"No comics with this character\"\r\n    } else {\r\n        tenComics = Array.from(comics);\r\n        tenComics.length = 10;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"char__basics\">\r\n                <img style={styleForImg} src={thumbnail} alt={name}/>\r\n                <div>\r\n                    <div className=\"char__info-name\">{name}</div>\r\n                    <div className=\"char__btns\">\r\n                        <a href={homepage} className=\"button button__main\">\r\n                            <div className=\"inner\">homepage</div>\r\n                        </a>\r\n                        <a href={wiki} className=\"button button__secondary\">\r\n                            <div className=\"inner\">Wiki</div>\r\n                        </a>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"char__descr\">\r\n                {description}\r\n            </div>\r\n            <div className=\"char__comics\">Comics:</div>\r\n            <ul className=\"char__comics-list\">\r\n                {\r\n                    noComics ? noComics : tenComics.map((item, i) => {\r\n                        return (\r\n                            <li key={i} className=\"char__comics-item\">\r\n                                <Link to={item.resourceURI.slice(-12)}>\r\n                                    {item.name}\r\n                                </Link>\r\n                            </li>\r\n                        )\r\n                    })\r\n                }\r\n            </ul>\r\n        </>\r\n    )\r\n}\r\n\r\nCharInfo.propTypes = {\r\n    charId: PropTypes.number\r\n}\r\n\r\nexport default CharInfo;","import { Formik, Form, Field, ErrorMessage as FormikErrorMessage } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport \"./charSearchInfo.scss\";\r\n\r\nimport useMarvelService from \"../../services/MarvelService\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nconst CharSearchInfo = () => {\r\n\r\n    const [char, setChar] = useState(null);\r\n    const {loading, error, clearError, getCharacterByName} = useMarvelService();\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    }\r\n\r\n    const updateChar = (name) => {\r\n        clearError();\r\n\r\n        getCharacterByName(name)\r\n            .then(onCharLoaded)\r\n    }\r\n\r\n    const errorMessage = error ? <div className=\"error\"><ErrorMessage /></div> : null;\r\n    const results = !char ? null : char.length > 0 ? \r\n                    <div className=\"char__search-container\">\r\n                        <div className=\"success\">There is! Visit {char[0].name} page?</div>\r\n                        <Link to={`/characters/${char[0].id}`} className=\"button button__secondary\">\r\n                            <div className=\"inner\">To Page</div>\r\n                        </Link>\r\n                    </div> :\r\n                    <div className=\"error\">\r\n                        The character was not found. Check the name and try again\r\n                    </div>;\r\n\r\n    return (\r\n        <div className=\"char__search-info\">\r\n            <Formik \r\n                initialValues = {{charName: \"\"}}\r\n                validationSchema = {Yup.object({\r\n                    charName: Yup.string()\r\n                            .required(\"This field is required\")\r\n                })}\r\n                onSubmit = {({charName}) => {\r\n                    updateChar(charName)}\r\n                }>\r\n                <Form className=\"char__search\">\r\n                    <label className=\"char__search-title\">Or find a character by name:</label>\r\n                    <div className=\"char__search-container\">\r\n                        <Field \r\n                            type=\"text\" \r\n                            id=\"charName\"\r\n                            name=\"charName\"\r\n                            placeholder=\"Enter name\" \r\n                            className=\"char__search-input\" />\r\n                        <button className=\"button button__main\" type=\"submit\" disabled={loading}>\r\n                            <div className=\"inner\">Find</div>\r\n                        </button>\r\n                    </div>\r\n                    <FormikErrorMessage component=\"div\" className=\"error\" name=\"charName\" />\r\n                </Form>\r\n            </Formik>\r\n            {results}\r\n            {errorMessage}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CharSearchInfo;","import { Component } from \"react\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nclass ErrorBoundary extends Component {\r\n    state = {\r\n        error: false\r\n    }\r\n\r\n    componentDidCatch() {\r\n        this.setState({\r\n            error: true\r\n        })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.error) {\r\n            return <ErrorMessage />\r\n        }\r\n\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary","export default __webpack_public_path__ + \"static/media/vision.067d4ae1.png\";","import { useState } from \"react\";\r\nimport { Helmet } from \"react-helmet\";\r\n\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport CharSearchInfo from \"../charSearchInfo/CharSearchInfo\";\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\n\r\nimport decoration from \"../../resources/img/vision.png\";\r\n\r\nconst MainPage = () => {\r\n    const [selectedChar, setChar] = useState(null);\r\n    \r\n    const onCharSelected = (id) => {\r\n        setChar(id);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <meta\r\n                    name=\"description\"\r\n                    content=\"Marvel information portal\"\r\n                />\r\n                <title>Marvel information portal</title> \r\n            </Helmet>\r\n            <ErrorBoundary>\r\n                <RandomChar/>\r\n            </ErrorBoundary>\r\n            <div className=\"char__content\">\r\n                <ErrorBoundary>\r\n                    <CharList onCharSelected={onCharSelected}/>\r\n                </ErrorBoundary>\r\n                <div className=\"char__info-container\">\r\n                    <ErrorBoundary>\r\n                        <CharInfo charId={selectedChar}/>\r\n                    </ErrorBoundary>\r\n                    <ErrorBoundary>\r\n                        <CharSearchInfo />\r\n                    </ErrorBoundary>\r\n                </div>    \r\n            </div>\r\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\"/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MainPage;","export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import img from \"./error.gif\";\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img \r\n        style={{display: \"block\", width: \"250px\", height: \"250px\", objectFit: \"contain\", margin: \"0 auto\"}}\r\n        src={img}\r\n        alt=\"Error\" />\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import {useHttp} from \"../hooks/http.hook\"\r\n\r\nconst useMarvelService = () => {\r\n    const {request, clearError, process, setProcess} = useHttp();\r\n\r\n    const _apiBase = \"https://gateway.marvel.com:443/v1/public/\";\r\n    const _apiKey = \"apikey=a6eacca719853626695a719b3c3ca442\";\r\n    const _baseOffset = 210;\r\n\r\n    const getCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n        return _transformCharacter(res.data.results[0]);\r\n    }\r\n\r\n    const getCharacterByName = async (name) => {\r\n        const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    const getComic = async (id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n        return _transformComics(res.data.results[0]);\r\n    }\r\n\r\n    const getAllList = async (limit, type, offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}${type}?limit=${limit}&offset=${offset}&${_apiKey}`);\r\n        if (type === \"comics\") {\r\n            return res.data.results.map(_transformComics);\r\n        } else {\r\n            return res.data.results.map(_transformCharacter);\r\n        }\r\n    }\r\n\r\n    const _transformCharacter = (char) => {\r\n        return {\r\n            name: char.name,\r\n            id: char.id,\r\n            description: char.description,\r\n            thumbnail: char.thumbnail.path + \".\" + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items\r\n        }\r\n    }\r\n\r\n    const _transformComics = (comic) => {\r\n        return {\r\n            title: comic.title,\r\n            id: comic.id,\r\n            price: comic.prices[0].price,\r\n            thumbnail: comic.thumbnail.path + \".\" + comic.thumbnail.extension,\r\n            desc: comic.description,\r\n            pageCount: comic.pageCount,\r\n            language: comic.textObjects.language\r\n        }\r\n    }\r\n\r\n    return { \r\n            clearError, \r\n            getCharacter, \r\n            getComic, \r\n            getAllList, \r\n            getCharacterByName, \r\n            process, \r\n            setProcess}\r\n}\r\n\r\nexport default useMarvelService;","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n    const [process, setProcess] = useState(\"waiting\");\r\n\r\n    const request = useCallback(async (url, method = \"GET\", body = null, headers = {\"Content-Type\": \"application/json\"}) => {\r\n        \r\n        setProcess(\"loading\");\r\n\r\n        try {\r\n            const response = await fetch(url, {method, body, headers});\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n            }\r\n\r\n            const data = await response.json();\r\n            return data;\r\n        } catch(e) {\r\n            setProcess(\"error\");\r\n            throw e;\r\n        }\r\n    }, []);\r\n\r\n    const clearError = useCallback(() => {\r\n        setProcess(\"loading\");\r\n    }, []);\r\n\r\n    return {request, clearError, process, setProcess}\r\n\r\n}","import \"./skeleton.scss\";\r\n\r\nconst Skeleton = () => {\r\n    return (\r\n        <>\r\n            <p className=\"char__select\">Please select a character to see information</p>\r\n            <div className=\"skeleton\">\r\n                <div className=\"pulse skeleton__header\">\r\n                    <div className=\"pulse skeleton__circle\"></div>\r\n                    <div className=\"pulse skeleton__mini\"></div>\r\n                </div>\r\n                <div className=\"pulse skeleton__block\"></div>\r\n                <div className=\"pulse skeleton__block\"></div>\r\n                <div className=\"pulse skeleton__block\"></div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Skeleton;","import Spinner from \"../components/spinner/Spinner\";\r\nimport ErrorMessage from \"../components/errorMessage/ErrorMessage\";\r\nimport Skeleton from \"../components/skeleton/Skeleton\";\r\n\r\nconst setContent = (process, Component, data) => {\r\n    switch(process) {\r\n        case \"waiting\":\r\n            return <Skeleton />;\r\n        case \"loading\":\r\n            return <Spinner />;\r\n        case \"confirmed\":\r\n            return <Component data={data} />;\r\n        case \"error\":\r\n            return <ErrorMessage />;\r\n        default:\r\n            throw new Error(\"Unexpected process state\");\r\n    }\r\n}\r\n\r\nexport default setContent;","import { useState, useEffect } from \"react\";\r\nimport useMarvelService from \"../services/MarvelService\";\r\n\r\nlet initialLoad = false;\r\n\r\nexport const useList = ({limit, type}) => {\r\n    const [list, setList] = useState([]);\r\n    const [newItemLoading, setNewItemLoading] = useState(false);\r\n    const [offset, setOffset] = useState(410);\r\n    const [itemEnded, setItemEnded] = useState(false);\r\n\r\n    const {loading, error, getAllList} = useMarvelService();\r\n\r\n    useEffect(() => {\r\n        onRequest(offset);\r\n    }, [])\r\n\r\n    const onRequest = (offsetArg) => {\r\n        onListLoading(true);\r\n        initialLoad = false;\r\n\r\n        getAllList(limit, type, offsetArg)\r\n            .then(onLoaded);\r\n    }\r\n\r\n    const onListLoading = (initial) => {\r\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);\r\n    }\r\n\r\n    const onLoaded = (newItem) => {\r\n        let ended = false;\r\n        if (newItem.length < limit) {\r\n            ended = true;\r\n        }\r\n\r\n        if (!initialLoad) {\r\n            initialLoad = true;\r\n            setList(items => [...items, ...newItem]);\r\n            setNewItemLoading(newItemLoading => false);\r\n            setOffset(offset => offset + limit);\r\n            setItemEnded(itemEnded => ended);\r\n        }\r\n    }\r\n\r\n    return {list, offset, newItemLoading, itemEnded, loading, error, onRequest}\r\n\r\n}"],"sourceRoot":""}